How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    I can distinguish the difference between
    two versions of a file which help me see
    the bug that was introduced.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    I can go back to the previous version
    whenever the current version has bug
    that I can't find where it is.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    One of the pros to manually choosing
    when to commit is that the action of
    commit could have logical meaning.
    One of the cons to manually choosing
    when to commit is that it could be
    worse if someone forgot to commit
    while making a lot of changes in the
    file.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git is for programming while Google
    Docs is not. In programming, modifying
    multiple files for a single logical change
    is possible. Therefore, it is better to save
    the tracked file at once in one commit.

How can you use the commands git log and git diff to view the history of files?

    Use git log to see the commit history
    and use the git diff to compare the
    difference between two commits.

How might using version control make you more confident to make changes that
could break something?

    If making changes break something, one
    can recover the previous version by
    version control.

Now that you have your workspace set up, what do you want to try using Git for?

    I want to use Git to to control the
    version of my code.
